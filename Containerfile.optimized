# =============================================================================
# Optimized single-stage build for eco-ci-cd
FROM registry.redhat.io/ubi9/ubi-minimal:latest

ARG ANSIBLE_COLLECTIONS_PATH=${ANSIBLE_COLLECTIONS_PATH:-"/usr/share/ansible/collections"}
ARG PY_EXEC=${PY_EXEC:-"python3.11"}
ARG WORKDIR=${WORKDIR:-"/eco-ci-cd"}
ARG VENV_DIR=${VENV_DIR:-"${WORKDIR}/.venv"}
ARG USE_VENV=${USE_VENV:-1}
# dnf settings
# ARG OPTS_DNF=${OPTS_DNF:-"--setopt=install_weak_deps=False --setopt=tsdocs=False"}
# microdnf settings (does not support --setopt=tsdocs=False)
ARG OPTS_DNF=${OPTS_DNF:-" --nodocs --setopt=install_weak_deps=0"}
ARG OPTS_PIP=${OPTS_PIP:-"--prefer-binary --no-cache-dir --no-compile"}
ARG OPTS_GALAXY=${OPTS_GALAXY:-"--no-cache --force --pre"}
ARG DEV_MODE=${DEV_MODE:-0}
ARG DEV_DNF_PACKAGES=${DEV_DNF_PACKAGES:-""}
ARG DEV_PIP_PACKAGES=${DEV_PIP_PACKAGES:-""}

# Set up environment variables
ENV ANSIBLE_COLLECTIONS_PATH="${ANSIBLE_COLLECTIONS_PATH}" \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

WORKDIR "${WORKDIR}"

# Single RUN layer for all system setup to minimize layers
RUN microdnf -y update $OPTS_DNF && \
    # Install only essential runtime packages
    microdnf -y install $OPTS_DNF \
        findutils \
        git-core \
        ${PY_EXEC} \
        ${PY_EXEC}-pip \
        sshpass \
        which && \
    # Clean package manager cache immediately
    microdnf clean all && \
    rm -rf /var/cache/yum && \
    # Create venv and install Python packages in one layer
    if [ "${USE_VENV}" -eq 1 ]; then \
        "${PY_EXEC}" -m venv "${VENV_DIR}" && \
        source "${VENV_DIR}/bin/activate"; \
    fi && \
    ${PY_EXEC} -m pip install $OPTS_PIP --upgrade pip setuptools

# Copy all essential files (controlled by .dockerignore negative patterns)
COPY . .

# Install Python packages from requirements.txt
RUN if [ "${USE_VENV}" -eq 1 ]; then \
        echo "Activating venv" && \
        source "${VENV_DIR}/bin/activate"; \
    else \
        echo "Installing to system Python"; \
    fi && \
    echo "Installing packages..." && \
    ${PY_EXEC} -m pip install $OPTS_PIP --upgrade pip setuptools && \
    ${PY_EXEC} -m pip install $OPTS_PIP -r requirements.txt && \
    # Clean pip cache
    ${PY_EXEC} -m pip cache purge

# Install Ansible collections requirements
RUN mkdir -p "${ANSIBLE_COLLECTIONS_PATH}" && \
    export ANSIBLE_COLLECTIONS_PATH="${ANSIBLE_COLLECTIONS_PATH}" && \
    echo "Installing collections" && \
    if [ "${USE_VENV}" -eq 1 ]; then \
        source "${VENV_DIR}/bin/activate"; \
    fi && \
    ansible-galaxy collection install $OPTS_GALAXY -r requirements.yml && \
    # Clean up galaxy cache
    rm -rf ~/.ansible/tmp/

# Create optimized entrypoint
RUN { \
    echo '#!/usr/bin/env bash'; \
    echo 'set -euo pipefail'; \
    (test "${USE_VENV}" -eq 1 && echo "source ${VENV_DIR}/bin/activate" || true); \
    echo 'exec "${@}"'; \
    } > "${WORKDIR}/entrypoint.sh" && \
    chmod +x "${WORKDIR}/entrypoint.sh" && \
    # Remove unnecessary files
    find "${WORKDIR}" -name "*.pyc" -delete && \
    find "${WORKDIR}" -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# Set entrypoint
ENTRYPOINT ["/eco-ci-cd/entrypoint.sh"]
CMD ["/bin/bash"]
