.ONESHELL:

# optional include of variables definitions file
-include vars.mk

SCRIPT_DEBUG							?= 0
RESET_VENV								?= 0
VENV_DIR								?= .venv
GIT_REMOTE_NAME							?= origin
GIT_WEB_URL								?= https://github.com/openshift-kni/eco-ci-cd
GIT_COMMIT_HASH							?= $(shell git rev-parse HEAD)
GIT_TAG									?= $(shell git tag --points-at=HEAD 2>/dev/null)
IMAGE_NAME								?= $(notdir $(GIT_WEB_URL))
IMAGE_REGISTRY 							?= quay.io/telcov10n-ci
IMAGE_VENDOR							?= Red Hat Inc.
IMAGE_MAINTAINER						?= Telcov10n CI/CD Team
IMAGE_LICENSE							?= GPL-3.0
IMAGE_FULL_NAME							?= $(IMAGE_REGISTRY)/$(IMAGE_NAME)
PODMAN_PARAMS 							?= 
PODMAN_BUILD_PARAMS 					?= --platform=linux/amd64
PODMAN_TAG_PARAMS 						?=
PODMAN_PUSH_PARAMS 						?=
BUILD_ARGS_FILE							?= podman-build-args.current.txt
PY_REQS_BASE_PREFIX						?= requirements-base-dev
PY_REQS									?= $(PY_REQS_BASE_PREFIX)
ANSIBLE_BUILDER_EXTRA_BUILD_CLI_ARGS	:= $(PODMAN_BUILD_PARAMS) --build-arg-file ../$(BUILD_ARGS_FILE)
ANSIBLE_BUILDER_VERBOSITY				?= 2
BUILD_DATE								:= $(shell date -u +'%Y-%m-%dT%H:%M:%SZ%:z')
BUILD_ARGS_FILE_HEADER 					:= \# Build arguments file generated by Makefile at $(BUILD_DATE)

# Helper text processing variables
empty :=
space := $(empty) $(empty)

ifeq ($(SCRIPT_DEBUG),1)
	PODMAN_PARAMS += --log-level debug
	ANSIBLE_BUILDER_EXTRA_BUILD_CLI_ARGS += --log-level debug
	ANSIBLE_BUILDER_VERBOSITY = 3
endif

ifeq ($(RESET_VENV),1)
	rm -rf $(VENV_DIR)
endif

# Newline template
define NEWLINE


endef

# OpenShift Client configuration (can be overridden in vars.mk)
OC_RELEASE								?= 4
OC_VERSION								?= 4.16.0
OC_MIRROR_URL							?= https://mirror.openshift.com/pub

# Build arguments template
define BUILD_ARGS_TEMPLATE
GIT_WEB_URL=$(GIT_WEB_URL)
GIT_COMMIT_HASH=$(GIT_COMMIT_HASH)
GIT_TAG=$(GIT_TAG)
IMAGE_VENDOR=$(IMAGE_VENDOR)
IMAGE_MAINTAINER=$(IMAGE_MAINTAINER)
IMAGE_LICENSE=$(IMAGE_LICENSE)
BUILD_DATE=$(BUILD_DATE)
OC_VERSION=$(OC_VERSION)
OC_RELEASE=$(OC_RELEASE)
OC_MIRROR_URL=$(OC_MIRROR_URL)
endef


# Generate podman build arguments file
image-build-args-file:
	@echo "Generating build arguments file: $(BUILD_ARGS_FILE)"
	$(file > $(BUILD_ARGS_FILE),$(BUILD_ARGS_FILE_HEADER)$(NEWLINE)$(BUILD_ARGS_TEMPLATE))
	@echo "Build arguments file generated"
	@if [ "${SCRIPT_DEBUG}" -eq 1 ]; then \
		echo "=== Build Args Content ==="; \
		cat $(BUILD_ARGS_FILE); \
		echo "========================="; \
	fi

# Build the image
image-build:	image-build-args-file
	@echo "Building image: $(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH)"
	@echo "Using build-args file: $(BUILD_ARGS_FILE)"
	@podman \
		$(PODMAN_PARAMS) \
		build \
			$(PODMAN_BUILD_PARAMS) \
			--build-arg-file $(BUILD_ARGS_FILE) \
			--tag $(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH) \
			-f Containerfile \
			.
	@echo "Image built: $(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH)"
	@GIT_TAG=$${GIT_TAG:-latest}
	@echo -n "Tagging it as: $(IMAGE_FULL_NAME):$${GIT_TAG} ..."
	@podman \
		$(PODMAN_PARAMS) \
		tag \
			$(PODMAN_TAG_PARAMS) \
			$(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH) \
			$(IMAGE_FULL_NAME):$${GIT_TAG}
	@echo "done"

# Push the image
image-push:	image-build-args-file
	@echo -n "Pushing: $(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH) ..."
	@podman \
		$(PODMAN_PARAMS) \
		push \
			$(PODMAN_PUSH_PARAMS) \
			$(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH)
	@echo " done"
	@GIT_TAG=$${GIT_TAG:-latest}
	@echo -n "Pushing: $(IMAGE_FULL_NAME):$${GIT_TAG} ..."
	@podman \
		$(PODMAN_PARAMS) \
		push \
			$(PODMAN_PUSH_PARAMS) \
			$(IMAGE_FULL_NAME):$${GIT_TAG}
	@echo " done"

################################################################################
# Python dependencies targets
################################################################################
venv-ensure:
	@echo "Ensuring venv $(VENV_DIR) is installed"
	mkdir -p $(VENV_DIR)
	python3.11 -m venv $(VENV_DIR)
	source $(VENV_DIR)/bin/activate
	pip install -r $(PY_REQS_BASE_PREFIX).txt

python-deps-update:	venv-ensure
	source $(VENV_DIR)/bin/activate
	@echo "Updating python dependencies"
	CMD=(pip-compile --strip-extras)
	if [ -f $(PY_REQS).txt ]; then
		CMD+=(--upgrade)
	else \
		CMD+=(--annotate)
	fi
	CMD+=($(PY_REQS).in)
	CMD+=(-o $(PY_REQS).txt)
	if [ "${SCRIPT_DEBUG}" -eq 1 ]; then \
		CMD+=(--verbose); \
		echo "Running: $${CMD[*]}"
	fi
	$${CMD[@]}

python-deps-update-interactive:	venv-ensure
	@echo "Updating python dependencies interactively"
	CMD=(pip-compile)
	CMD+=($(PY_REQS).in)
	CMD+=(-o $(PY_REQS).txt)
	CMD+=(--interactive)

python-deps-save:	venv-ensure	python-deps-update
	@echo "Saving python dependencies"
	GIT_PAGER=cat git diff $(PY_REQS).txt
	git add $(PY_REQS).txt
	git commit -s -m "Automatic Update of python dependencies done on $(shell date)"


################################################################################
# cnf-reporting-* make targets (under playbooks/cnf/reporting)
################################################################################
# cnf-reporting-bootstrap
# cnf-reporting-reset-collections-reqs
# cnf-reporting-clean-caches
# cnf-reporting-gendata
# cnf-reporting-render
# cnf-reporting-run-playbook
# cnf-reporting-pylint
# cnf-reporting-ansible-lint
# cnf-reporting-shellcheck
# cnf-reporting-lint
# cnf-reporting-pytest
# cnf-reporting-test-verify
# cnf-reporting-test
# cnf-reporting-retest
cnf-reporting-%:
	# The recipe for the rule.
	# It runs the sub-make in a subshell to avoid changing the current directory.
	@echo "--- Forwarding target '$(*)' to playbooks/cnf/reporting ---"
	@(cd playbooks/cnf/reporting && $(MAKE) $(*) )
