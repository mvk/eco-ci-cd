.ONESHELL:

# optional include of variables definitions file
-include vars.mk

SCRIPT_DEBUG							?= 0
RESET_VENV								?= 0
VENV_DIR								?= .venv
GIT_REMOTE_NAME							?= origin
GIT_REPO_URL							?= $(shell git config --get remote.$(GIT_REMOTE_NAME).url)
GIT_WEB_URL								?= $(shell ./scripts/git_url_norm.py -u $(GIT_REPO_URL))
GIT_COMMIT_HASH							?= $(shell git rev-parse HEAD)
GIT_SRC_BRANCH							?= $(shell git rev-parse --abbrev-ref HEAD)
GIT_TRG_BRANCH							?= $(shell git show-branch -a | grep '\*' | grep -v $(GIT_SRC_BRANCH) | head -n1 | sed -e 's/.*\[\(.*\)\].*/\1/' -e 's/[\^~].*//')
GIT_TAG									?= $(shell git tag --points-at=HEAD 2>/dev/null)
IMAGE_NAME								?= $(notdir $(GIT_WEB_URL))
IMAGE_REGISTRY 							?= quay.io/telcov10n-ci
IMAGE_VENDOR							?= Red Hat Inc.
IMAGE_MAINTAINER						?= Telcov10n CI/CD Team
IMAGE_DESCRIPTION						?= Ecosystem CI/CD Image
IMAGE_LICENSE							?= GPL-3.0
IMAGE_TITLE								?= ECO CI/CD
IMAGE_FULL_NAME							?= $(IMAGE_REGISTRY)/$(IMAGE_NAME)
EE_NAME									?= $(IMAGE_NAME)-ee
EE_DIR									?= $(EE_NAME)-ubi-amd64
EE_FULL_NAME							?= $(IMAGE_REGISTRY)/$(EE_NAME)
EE_TAG									?= $(GIT_COMMIT_HASH)
PODMAN_PARAMS 							?= 
PODMAN_BUILD_PARAMS 					?= --platform=linux/amd64
PODMAN_TAG_PARAMS 						?=
PODMAN_PUSH_PARAMS 						?=
BUILD_ARGS_FILE							?= podman-build-args.current.txt
PY_REQS_BASE_PREFIX						?= requirements-base-dev
PY_REQS_EE_PREFIX						?= requirements-ee
PY_REQS									?= $(PY_REQS_EE_PREFIX)
ANSIBLE_BUILDER_EXTRA_BUILD_CLI_ARGS	:= $(PODMAN_BUILD_PARAMS) --build-arg-file ../$(BUILD_ARGS_FILE)
ANSIBLE_BUILDER_VERBOSITY				?= 2
BUILD_DATE								:= $(shell date -u +'%Y-%m-%dT%H:%M:%SZ%:z')
BUILD_ARGS_FILE_HEADER 					:= \# Build arguments file generated by Makefile at $(BUILD_DATE)
EE_BUILD_ARGS_FILE_HEADER 				:= \# Additional ansible-builder Execution Environment build arguments generated by Makefile at $(BUILD_DATE)

EE_NAV_PLAYBOOK							?= playbooks/cnf/reporting/test_report_send.yml
EE_NAV_MODE								?= stdout
EE_NAV_PULL_POLICY						?= missing
EE_NAV_EXTRA_VARS						?=

# Helper text processing variables
empty :=
space := $(empty) $(empty)

ifeq ($(SCRIPT_DEBUG),1)
	PODMAN_PARAMS += --log-level debug
	ANSIBLE_BUILDER_EXTRA_BUILD_CLI_ARGS += --log-level debug
	ANSIBLE_BUILDER_VERBOSITY = 3
endif

ifeq ($(RESET_VENV),1)
	rm -rf $(VENV_DIR)
endif

# Newline template
define NEWLINE


endef

# Build arguments template
define BUILD_ARGS_TEMPLATE
GIT_REPO_URL=$(GIT_REPO_URL)
GIT_WEB_URL=$(GIT_WEB_URL)
GIT_SRC_BRANCH=$(GIT_SRC_BRANCH)
GIT_TRG_BRANCH=$(GIT_TRG_BRANCH)
GIT_COMMIT_HASH=$(GIT_COMMIT_HASH)
GIT_TAG=$(GIT_TAG)
IMAGE_VENDOR=$(IMAGE_VENDOR)
IMAGE_MAINTAINER=$(IMAGE_MAINTAINER)
IMAGE_DESCRIPTION=$(IMAGE_DESCRIPTION)
IMAGE_LICENSE=$(IMAGE_LICENSE)
IMAGE_TITLE=$(IMAGE_TITLE)
OC_VERSION=$(OC_VERSION)
OC_RELEASE=$(OC_RELEASE)
OC_MIRROR_URL=$(OC_MIRROR_URL)
BUILD_DATE=$(BUILD_DATE)
endef

# EE-specific environment variables template
define EE_BUILD_ARGS_TEMPLATE
$(if $(ANSIBLE_HOST_KEY_CHECKING),ANSIBLE_HOST_KEY_CHECKING=$(ANSIBLE_HOST_KEY_CHECKING))
$(if $(ANSIBLE_STDOUT_CALLBACK),ANSIBLE_STDOUT_CALLBACK=$(ANSIBLE_STDOUT_CALLBACK))
$(if $(ANSIBLE_COLLECTIONS_PATH),ANSIBLE_COLLECTIONS_PATH=$(ANSIBLE_COLLECTIONS_PATH))
$(if $(ANSIBLE_ROLES_PATH),ANSIBLE_ROLES_PATH=$(ANSIBLE_ROLES_PATH))
$(if $(PYTHONUNBUFFERED),PYTHONUNBUFFERED=$(PYTHONUNBUFFERED))
$(if $(PYTHONDONTWRITEBYTECODE),PYTHONDONTWRITEBYTECODE=$(PYTHONDONTWRITEBYTECODE))
endef

# Generate podman build arguments file
image-build-args-file:
	@echo "Generating build arguments file: $(BUILD_ARGS_FILE)"
	$(if $(filter ee-%,$(MAKECMDGOALS)),\
		$(file > $(BUILD_ARGS_FILE),$(BUILD_ARGS_FILE_HEADER)$(NEWLINE)$(BUILD_ARGS_TEMPLATE)$(NEWLINE)$(EE_BUILD_ARGS_FILE_HEADER)$(NEWLINE)$(subst $(space),$(NEWLINE),$(strip $(EE_BUILD_ARGS_TEMPLATE)))), \
		$(file > $(BUILD_ARGS_FILE),$(BUILD_ARGS_FILE_HEADER)$(NEWLINE)$(BUILD_ARGS_TEMPLATE)))
	@echo "Build arguments file generated"
	@if [ "${SCRIPT_DEBUG}" -eq 1 ]; then \
		echo "=== Build Args Content ==="; \
		cat $(BUILD_ARGS_FILE); \
		echo "========================="; \
	fi

# Build the image
image-build:	image-build-args-file
	@echo "Building image: $(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH)"
	@echo "Using build-args file: $(BUILD_ARGS_FILE)"
	@podman \
		$(PODMAN_PARAMS) \
		build \
			$(PODMAN_BUILD_PARAMS) \
			--build-arg-file $(BUILD_ARGS_FILE) \
			--tag $(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH) \
			-f Containerfile \
			.
	@echo "Image built: $(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH)"
	@GIT_TAG=$${GIT_TAG:-latest}
	@echo -n "Tagging it as: $(IMAGE_FULL_NAME):$${GIT_TAG} ..."
	@podman \
		$(PODMAN_PARAMS) \
		tag \
			$(PODMAN_TAG_PARAMS) \
			$(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH) \
			$(IMAGE_FULL_NAME):$${GIT_TAG}
	@echo "done"

# Push the image
image-push:	image-build-args-file
	@echo -n "Pushing: $(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH) ..."
	@podman \
		$(PODMAN_PARAMS) \
		push \
			$(PODMAN_PUSH_PARAMS) \
			$(IMAGE_FULL_NAME):$(GIT_COMMIT_HASH)
	@echo " done"
	@GIT_TAG=$${GIT_TAG:-latest}
	@echo -n "Pushing: $(IMAGE_FULL_NAME):$${GIT_TAG} ..."
	@podman \
		$(PODMAN_PARAMS) \
		push \
			$(PODMAN_PUSH_PARAMS) \
			$(IMAGE_FULL_NAME):$${GIT_TAG}
	@echo " done"

################################################################################
# Python dependencies targets
################################################################################
venv-ensure:
	@echo "Ensuring venv $(VENV_DIR) is installed"
	mkdir -p $(VENV_DIR)
	python3.11 -m venv $(VENV_DIR)
	source $(VENV_DIR)/bin/activate
	pip install -r $(PY_REQS_BASE_PREFIX).txt

python-deps-update:	venv-ensure
	source $(VENV_DIR)/bin/activate
	@echo "Updating python dependencies"
	CMD=(pip-compile --strip-extras)
	if [ -f $(PY_REQS).txt ]; then
		CMD+=(--upgrade)
	else \
		CMD+=(--annotate)
	fi
	CMD+=($(PY_REQS).in)
	CMD+=(-o $(PY_REQS).txt)
	if [ "${SCRIPT_DEBUG}" -eq 1 ]; then \
		CMD+=(--verbose); \
		echo "Running: $${CMD[*]}"
	fi
	$${CMD[@]}

python-deps-update-interactive:	venv-ensure
	@echo "Updating python dependencies interactively"
	CMD=(pip-compile)
	CMD+=($(PY_REQS).in)
	CMD+=(-o $(PY_REQS).txt)
	CMD+=(--interactive)

python-deps-save:	venv-ensure	python-deps-update
	@echo "Saving python dependencies"
	GIT_PAGER=cat git diff $(PY_REQS).txt
	git add $(PY_REQS).txt
	git commit -s -m "Automatic Update of python dependencies done on $(shell date)"


################################################################################
# Execution Environment targets using ansible-builder
################################################################################

# Sync requirements files for execution environment
ee-sync-requirements:
	@echo "Syncing requirements files for execution environment"
	@cp requirements.yml $(EE_DIR)/requirements-ee.yml
	@cp requirements-ee.txt $(EE_DIR)/requirements-ee.txt
	@echo "Requirements files synchronized"

# Build execution environment using ansible-builder
ee-build: image-build-args-file venv-ensure ee-sync-requirements
	@echo "Building execution environment: $(EE_FULL_NAME):$(EE_TAG)"
	@echo "Using build args from: $(BUILD_ARGS_FILE)"
	@source $(VENV_DIR)/bin/activate && \
		cd $(EE_DIR) && ansible-builder build \
			--tag $(EE_FULL_NAME):$(EE_TAG) \
			--extra-build-cli-args="$(ANSIBLE_BUILDER_EXTRA_BUILD_CLI_ARGS)" \
			--verbosity $(ANSIBLE_BUILDER_VERBOSITY)
	@echo "Execution environment built: $(EE_FULL_NAME):$(EE_TAG)"
	@GIT_TAG=$${GIT_TAG:-latest}
	@echo -n "Tagging: $(EE_FULL_NAME):$(EE_TAG) as $(EE_FULL_NAME):$${GIT_TAG} ..."
	@podman \
		$(PODMAN_PARAMS) \
		tag \
			$(PODMAN_TAG_PARAMS) \
			$(EE_FULL_NAME):$(EE_TAG) \
			$(EE_FULL_NAME):$${GIT_TAG}
	@echo " done"

# Push execution environment
ee-push: ee-build
	@echo -n "Pushing: $(EE_FULL_NAME):$(EE_TAG) ..."
	@podman \
		$(PODMAN_PARAMS) \
		push \
			$(PODMAN_PUSH_PARAMS) \
			$(EE_FULL_NAME):$(EE_TAG)
	@echo " done"
	@GIT_TAG=$${GIT_TAG:-latest}
	@echo -n "Pushing: $(EE_FULL_NAME):$${GIT_TAG} ..."
	@podman \
		$(PODMAN_PARAMS) \
		push \
			$(PODMAN_PUSH_PARAMS) \
			$(EE_FULL_NAME):$${GIT_TAG}
	@echo " done"

# Clean execution environment build artifacts
ee-clean:
	@echo "Cleaning execution environment build artifacts"
	@rm -rf $(EE_DIR)/build/
	@echo "Build artifacts cleaned"

# Show execution environment info
ee-info:
	@echo "Execution Environment Information:"
	@echo "  EE Directory: $(EE_DIR)"
	@echo "  EE Name: $(EE_NAME)"
	@echo "  EE Tag: $(EE_TAG)"
	@echo "  Full Image: $(EE_FULL_NAME):$(EE_TAG)"
	@echo "  Git Commit Hash: $(GIT_COMMIT_HASH)"
	@echo "  Git Tag (if any): $(GIT_TAG)"
	@echo "  EE uses hash as tag: $(EE_TAG)"


# Run playbook using ansible-navigator with your EE
ee-navigator-run:
	@echo "Running playbook $(EE_NAV_PLAYBOOK) using ansible-navigator with your EE ($(EE_NAME))"
	ansible-navigator run \
		--execution-environment-image $(EE_FULL_NAME):$(EE_TAG) \
		--mode $(EE_NAV_MODE) \
		--pull-policy $(EE_NAV_PULL_POLICY) \
		$(EE_NAV_PLAYBOOK) \
		$(EE_NAV_EXTRA_VARS)

# Interactive ansible-navigator
ansible-nav-interactive:
	ansible-navigator \
		--execution-environment-image $(EE_FULL_NAME):$(EE_TAG) \
		--mode interactive

################################################################################
# cnf-reporting-* make targets (under playbooks/cnf/reporting)
################################################################################
# cnf-reporting-bootstrap
# cnf-reporting-reset-collections-reqs
# cnf-reporting-clean-caches
# cnf-reporting-gendata
# cnf-reporting-render
# cnf-reporting-run-playbook
# cnf-reporting-pylint
# cnf-reporting-ansible-lint
# cnf-reporting-shellcheck
# cnf-reporting-lint
# cnf-reporting-pytest
# cnf-reporting-test-verify
# cnf-reporting-test
# cnf-reporting-retest
cnf-reporting-%:
	# The recipe for the rule.
	# It runs the sub-make in a subshell to avoid changing the current directory.
	@echo "--- Forwarding target '$(*)' to playbooks/cnf/reporting ---"
	@(cd playbooks/cnf/reporting && $(MAKE) $(*) )

	
